program main
import "raylib.h"
? This file intentionally has both valid and invalid syntax for testing

? Invalid function - missinising 'do'
test::"kjlkjlk"
test::"kjklkjlk"
test::"kjklkjlk"
tkest::"kjklkjlk"
tkest::"kjklkjlk"
bob::"kjklkjlk"
BOB::"kjl"
tekk::[32]
tekkst::9
test:"kjklkjlk"

print|BOB|
? Valid function
greet :: | name:string |:
	ahoy|f"Hello, {}"|

greet2 :: |name:int|void:
	ahoy|"Hello,"|


if kjdklj.length|| > 10 then print |"kkdlfj"

? Valid loop
loop i from: 1 to 10 do
	ahoy|i|

? Valid if statement
x: 42
if x is 42 do ahoy |"The answer!"|

? Variables for autocomplete testing
my_variable: 100
another_var: "test"
test_bool: true

? Invalid syntax - missing assignment operator
bad_variable "this is wrong"




possible_color: "red"
switch possible_color on
  "red" : ahoy|"Red color"|
  "blue" : ahoy|"Blue color"|
  "green" :ahoy|"jkljlk"|
  _: ahoy |"Unknown color"|


struct point:
	x:float
	time:int
	type smoke_particle:
		y: int
? Enum declaration

enum status:
	PENDING
	ACTIVE

lkjlkj :: |test:string|: print|"This is a test"|

? Test operators
result: 5 plus 3
result2: 10 minus 2
result3: 4 times 5
result4: 20 div 4

? Test boolean operators
flag: true and false
flag2: true or false
flag3: not flag

? Array operations
numbers: [1, 2, 3, 4, 5]
first: numbers[0]

? Dictionary
person: {"name": "Alice", "age": 30}
name_val: person["name"]

? This should trigger autocomplete when you type 'fu' or 'lo' or 'if'

person: <name: "Alice", age: 30>? if we have struct with these explicit properties we infer the type to be person

struct person:
	name: string
	age: int
	type dwarf:
		height:int


person: <name: "Alice", age: 30, height: 12> ? would be inferred as person.dwarf type
person: <name: "Alice", age: 30>
print|f"{person.name}"|
person.strip||




print|f"{person.type}"|
test_di:dict= {"name": "Alice", "age": 30}

person: <name: "Alice", age: 30>
dict_example:dict= {name: "Alice", age: 30}? if we have struct with these explicit properties we infer the type to be person
person<'name'> : "bob"
dict_example{"name"} : "charlene"

numbers: [1, 2, 3, 4, 5]

testk: "larry"


first: numbers[0] ? typed int
name:string= "larry" ? typed string
name:string= 29 ? typed should throw linting error "expected string got int"

age: 29 ? type inferred as int
age:int= 29 ? explicitly typed as int
age:string= "age" ? typed should throw linting error "expected int got string"
age: 29 ? variable type inferred as int
age:: 29 ? const type inferred as int
name::string= 29 ? const type should throw linting error "expected string got int"
